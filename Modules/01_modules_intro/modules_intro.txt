// Update Date : 2025-01-21
// OS : Windows 10 64bit
// Program : Visual Studio 2022
// Version : C++20
// Configuration : Debug-x64, Release-x64

다음 순서대로 보도록 하자.

1. modules_intro
2. basic_modules
3. export_entities
4. separate_declaration_and_definition_to_different_files
5. export_import
6. submodules_tricks_by_naming_modules
7. partition_modules
8. modules_with_namespaces
9. private_module_fragments
10. header_units
11. visibility_and_reachability

##################################################

https://en.cppreference.com/w/cpp/language/modules

C++20부터는 기존의 헤더 파일 방식의 문제점을 개선한 모듈이라는 새로운 컴파일 방식을 지원한다.

##################################################

그럼 헤더 파일(.h)과 소스 파일(.cpp) 방식부터 보도록 하자.

1. 이 방식으로 하나의 기능 단위를 만들고자 하면 .h/.cpp 파일을 생성하는 것이 일반적이다.

2. 헤더 파일에는 선언이, 소스 파일에는 구현이 작성된다.

3. 헤더 파일은 인터페이스처럼 동작하여 다른 소스 코드에 포함될 수 있다.

4. 소스 코드는 전처리기나 헤더 파일 포함 순서에 의해서 선택적으로 컴파일 될 수 있다.

##################################################

https://en.wikipedia.org/wiki/Translation_unit_(programming)
https://en.cppreference.com/w/cpp/preprocessor
https://cplusplus.com/doc/tutorial/preprocessor/

이 방식으로 C/C++ 코드를 빌드하면 다음 순서를 거친다.

1. 전처리 단계(Preprocessing)
- #으로 정의된 전처리기에 의해 코드를 치환하는 단계
- #include 작업에 의해 코드가 팽창될 수 있음.

2. 컴파일 단계(Compilation)
- 코드가 컴파일되어 오브젝트 파일(혹은 코드)로 변환됨.
- 이 과정에서 코드가 최적화될 수 있음.

3. 링크 단계(Linking)
- 각 오브젝트 파일은 각 TU(translation units)에 의해 링킹됨.

[ A.cpp ] ---(Pre-Processing)---> [ Intermediate File ]
                                            |
                                            | Compilation
                                            ↓
                                     [ Object Code ]
                                            |
                                            ├---(Assemble & Linking)---→ [ Executable ]
                                            |
                                     [ Object Code ]
                                            ↑
                                            |
                                            |
[ B.cpp ] ---(Pre-Processing)---> [ Intermediate File ]

##################################################

https://en.cppreference.com/w/cpp/language/definition#One_Definition_Rule

기존의 헤더 파일을 기반으로 하는 빌드 방식은 다음 문제점이 존재한다.

1. 전처리 단계에서 다수의 헤더 파일을 포함하는 과정에서 발생하는 코드 팽창으로 인해 컴파일 속도가 느리다.

2. 헤더 파일은 재사용할 수 있지만 포함할 때마다 코드 팽창이 발생하며 이러한 중복 포함이 다수의 TU에 발생하면 컴파일 속도에 영향을 미친다.

3. 헤더 파일을 포함하여 코드가 팽창하면 그만큼 코드를 파싱해야 하는 작업이 중복된다.

4. 높은 의존성으로 인해 헤더를 포함하는 순서가 중요하며 복잡한 전처리 문제가 발생한다.

5. 동일한 프로그램 내 동일한 엔터티(변수, 함수, 클래스 등)에 대해 정의가 모순되거나 충돌하는 ODR 위반이 발생하기 쉽다.
- ODR 위반(One Definition Rule Violations) : 쉽게 말하자면 선언은 여러 번 가능해도 정의는 한 번만 이루어져야 하는 규칙을 말함.

6. 동일한 TU 내 동일 헤더가 중복으로 포함되는 문제를 방지하려면 헤더 가드나 #pragma once 코드가 필요하다.

7. 헤더 파일은 단순 텍스트 파일이며 그 자체로 캡슐화되지 않기 때문에 외부의 매크로 정의에 의해서 동작이 다르게 결정될 수 있다.

매크로 유무에 의해서 동작이 달라지는 경우는 다음과 같다.

code)---------------------------------------------
#include <iostream>

#include "SomeHeader.h"
// #define SOME_MACRO

void func1() { std::cout << "func1()\n";  }
void func2() { std::cout << "func2()\n";  }

#ifdef SOME_MACRO
    #define func func1
#else
    #define func func2
#endif

int main()
{
    func();

    return 0;
}
--------------------------------------------------

포함되는 헤더 파일이나 소스 파일에 매크로 상수 OPTIMIZATIONS_ON가 있느냐 없느냐에 따라 다르게 컴파일된다.

C++20부터는 이러한 문제점을 해결하고자 Modules를 도입하였다.

C++20의 모듈에 정의된 매크로는 모듈이 export 된다고 해도 딸려나가지 않기 때문에 다른 파일에 영향을 미치지 않는다.
!! 이는 모듈 자체가 하나의 캡슐화된 방식으로 동작하기 때문에 그런 것임. !!

##################################################

https://en.wikipedia.org/wiki/Modularity
https://en.wikipedia.org/wiki/Modular_programming

C++20의 모듈을 설명하기에 앞서 모듈 방식(혹은 모듈화)이 무엇인지 알아야 한다.

1. 모듈은 하나의 어플리케이션을 기능 단위로 이산화하여 나눈 것이다.

2. (중요) 모듈은 재사용할 수 있어야 한다.

3. C++의 경우 헤더 파일과 소스 파일을 나누어 작업할 수 있으며 네임스페이스 등을 통해 모듈 간 충돌을 방지한다.

엄밀히 말하자면 C++20 이전에도 모듈이라는 컨셉 자체는 헤더 파일과 소스 파일 그리고 네임스페이스 등을 통해 지원하고 있었다.

C++20 이후부터는 직접적으로 Modules를 도입하여 더욱 현대화된 모듈 방식을 사용할 수 있다.

##################################################

https://en.cppreference.com/w/cpp/language/modules
https://clang.llvm.org/docs/StandardCPlusPlusModules.html
https://learn.microsoft.com/en-us/cpp/cpp/modules-cpp?view=msvc-170
https://en.cppreference.com/w/cpp/language/tu_local

C++20에 도입된 Modules는 다음과 같은 특징이 있다.

1. 하나의 모듈은 컴파일되는 하나의 TU(Translation Unit)이다.

2. 사용할 때 전처리기를 필요로 하지 않는다.

3. 기존의 헤더 파일과 호환된다.

4. 같은 TU 내에서 여러 번 import해도 실제로는 한 번만 import된다.

5. 의존성에 따른 포함 순서가 강제되지 않는다.

6. 가시성을 개발자가 조율할 수 있다(가시성(Visibility)과 도달성(Reachability)은 다르니 주의해야 함).
- 이를 통해 전역적인 수준에서의 정보 은닉을 보다 원활하게 조절할 수 있음.

7. 선언용 파일과 정의용 파일을 구분할 필요 없이 하나의 모듈 파일 내에서 작업해도 된다.
- 강제하는 것은 아니며 모듈이라고 해도 선언용 파일과 정의용 파일을 구분해서 작업하는 것도 허용함.

8. 여러 모듈을 하나의 사용 가능한 모듈로 결합할 수 있다.

9. 모듈은 다른 모듈에 포함될 수 있다.

##################################################

https://www.albertogramaglia.com/modern-cpp-modules-theory/
https://learn.microsoft.com/en-us/cpp/cpp/tutorial-named-modules-cpp?view=msvc-170#anatomy-of-a-module
https://vector-of-bool.github.io/2019/03/31/modules-2.html
https://vector-of-bool.github.io/2019/10/07/modules-3.html
https://gcc.gnu.org/pipermail/gcc-cvs/2020-August/317609.html
https://en.cppreference.com/w/cpp/language/storage_duration#Module_linkage
https://en.cppreference.com/w/cpp/language/storage_duration#External_linkage
https://en.cppreference.com/w/cpp/language/namespace
https://en.cppreference.com/w/cpp/language/language_linkage

(중요) C++20에서 사용되는 모듈의 구조는 다음과 같다.

+----+----+----+----+----+----+----+----+----+----+----+
| module;                                              |
|                                                      |
|         ( Global Module Fragment : Optional )        |
|                                                      |
+----+----+----+----+----+----+----+----+----+----+----+
| export module <name>; or module <name>;              |
| import <other modules>;                              |
|                                                      |
|             ( Module Preamble : Required )           |
|                                                      |
+----+----+----+----+----+----+----+----+----+----+----+
| export <namespace, function, class>;                 |
| export { ... }                                       |
| entities only visible in this and same named module; |
|                                                      |
|   ( Module Purview / Module Interface : Optional )   |
|                                                      |
+----+----+----+----+----+----+----+----+----+----+----+
| module: private;                                     |
|                                                      |
|        ( Private Module Fragment : Optional )        |
|                                                      |
+----+----+----+----+----+----+----+----+----+----+----+

# Global Module Fragment
- 전처리기 지시자(preprocessor directives)만 적용 가능함.
  - 전처리기 지시자는 요직 이 구간에서만 적용할 수 있음.
- 일반적으로 #include를 통해 헤더 파일을 모듈에 포함하는 구간임.

# Module Preamble
- 모듈의 이름을 결정하는 구간임.
- 다른 모듈을 포함할 수 있음.
- export module가 적용되면 named module이라고 함.

# Module Purview
- 모듈의 엔터티를 구성하여 인터페이스를 작성하기 위한 구간임.
  - 엔터티 : 변수, 함수, 클래스, 함수 템플릿, 클래스 템플릿, concepts 등
- export를 통해 엔터티를 가시화하여 공개할 수도 있고, 적용하지 않고 모듈 내에서만 사용하게 숨길 수도 있음.
  - Module Linkage : export를 적용하지 않으면 코드는 모듈 내부로 결합되기 때문에 외부에서 사용할 수 없음.
  - External Linkage : export를 적용하면 코드는 외부로 결합될 수 있기 때문에 바깥에서 사용할 수 있음.
  - (주의) 익명 네임스페이스나 static 키워드 같이 Internal Linkage가 적용되는 요소를 대상으로는 export를 적용할 수 없음.

external linkage, module linkage, internal linkage는 방식이 각기 다르니까 혼동하지 않게 주의해야 한다.
원문 : A name can have external linkage, module linkage(since C++20), internal linkage, or no linkage:
원문 : Even though names in an unnamed namespace may be declared with external linkage, ...

# Private Module Fragment
- 모듈의 캡슐화 수준을 강화하기 위해 사용함.
- 선언한 엔터티를 외부에 공개했을 때 여기서 구현 및 수정한다고 해도
  다른 모듈이나 코드에서 해당 엔터티를 사용한다 해도 재컴파일에 영향을 미치지 않음.

https://learn.microsoft.com/en-us/cpp/cpp/tutorial-named-modules-cpp?view=msvc-170#anatomy-of-a-module
위 링크를 보면 모듈 구조에 맞춰서 코드를 작성하는 방법이 자세하게 나와 있다.

code)---------------------------------------------
module; // optional. Defines the beginning of the global module fragment

// #include directives go here but only apply to this file and
// aren't shared with other module implementation files.
// Macro definitions aren't visible outside this file, or to importers.
// import statements aren't allowed here. They go in the module preamble, below.

export module [module-name]; // Required. Marks the beginning of the module preamble

// import statements go here. They're available to all files that belong to the named module
// Put #includes in the global module fragment, above

// After any import statements, the module purview begins here
// Put exported functions, types, and templates here

module :private; // optional. The start of the private module partition.

// Everything after this point is visible only within this file, and isn't 
// visible to any of the other files that belong to the named module.
--------------------------------------------------

code)---------------------------------------------
module; // optional. Defines the beginning of the global module fragment

// This is where #include directives go. They only apply to this file and aren't shared
// with other module implementation files.
// Macro definitions aren't visible outside of this file or to importers
// import statements aren't allowed here. They go in the module preamble, below

export module [Module-name]:[Partition name]; // Required. Marks the beginning of the module preamble

// import statements go here. 
// To access declarations in another partition, import the partition. Only use the partition name, not the module name.
// For example, import :Point;
// #include directives don't go here. The recommended place is in the global module fragment, above

// export imports statements go here

// after import, export import statements, the module purview begins
// put exported functions, types, and templates for the partition here

module :private; // optional. Everything after this point is visible only within this file, and isn't 
                         // visible to any of the other files that belong to the named module.
--------------------------------------------------

위 예시에 맞게 코드를 적용하면 이런 느낌이다(https://vector-of-bool.github.io/2019/10/07/modules-3.html).

code)---------------------------------------------
// [The global module fragment - optional]
module;
#include <stuff.hpp>

// [The module preamble]
export module foo:bar;

export import widgets;
import gadgets;

// [The module interface - optional]
export void do_stuff();

// [The private module fragment - optional]
module :private;

void do_stuff() {
    std::cout << "Howdy!\n";
}

// [The end]
--------------------------------------------------

##################################################

https://en.cppreference.com/w/cpp/language/storage_duration#Linkage

Modules의 컴파일 과정을 알기 파악하기 위해선 먼저 Linkage에 대해서 알아야 한다.

1. C++20 이전에는 3가지 유형의 Linkage가 지원되었다.
- No Linkage : 지역 변수와 같은 것을 대상으로 하는 Linkage
- Internal Linkage : 익명 네임스페이스나 static 같은 요소를 대상으로 하는 Linkage
- External Linkage : 전역적인 요소를 대상으로 하는 Linkage

2. C++20 이후에는 Modules를 위한 Module Linkage를 지원한다.
- Module Linkage : export가 적용되지 않아 module TU에 의해서만 접근 가능한 것을 대상으로 하는 Linkage

원문 : Names declared at namespace scope have module linkage if their declarations are attached to a named module and are not exported, and do not have internal linkage.

##################################################

https://www.albertogramaglia.com/modern-cpp-modules-theory/

Modules의 빌드 과정에서 BMI(Binary Module Interface)라는 것을 생성한다.

1. BMI는 모듈을 컴파일하면 생성되는 파일로 컴파일 과정에서 사용되는 메타 데이터를 포함한다.

2. BMI에 대한 표준은 아직 없기 때문에 컴파일러마다 다루는 방식이 다르다.

3. export module을 통해 결정한 모듈의 이름과 모듈 파일의 이름, BMI 파일의 이름은 서로 연관성이 없으며,
   모듈 파일이 모듈 이름을 찾는 과정 또한 표준으로 정해진 것이 아니기 때문에 컴파일러가 다르게 처리한다.

MSVC 기준
- 모듈 파일(.ixx)
- BMI(.ifc)
- 적용 파일(implementation files, .cpp)

GCC 기준
- 모듈 파일(확장자가 정해지지 않음)
- BMI(확장자가 정해지지 않음)
- 적용 파일(implementation files, .cpp)

Clang 기준
- 모듈 파일(.cppm)
- BMI(.pcm)
- 적용 파일(implementation files, .cpp)

이처럼 모듈 파일 확장자는 아직 표준으로 정해진 것이 아니기에 컴파일러마다 적용하는 방식이 상이하다.

g++이나 clang++을 쓰더라도 컴파일러 옵션을 제공하면 .ixx를 모듈의 확장자 이름으로 쓸 수 있다.


MSVC에서 Modules이 적용된 코드는 다음 과정을 거치며 빌드된다.

아래 코드는 main.cpp가 module.ixx가 export module로 정의한 이름을 import로 가져와 사용한다고 가정하고 있다.

  [ module.ixx ] <----(Imports)---- [ main.cpp ]
        |                                |
        |                                |
    +---+-----------+       Dependency   |
    |               |   +----------------+
    |               |   |                |
    |               |   |                |
    ↓               ↓   ↓                ↓
[ module.obj ]  [ module.ifc ]      [ main.obj ]
       |                                 |
       |                                 |
       |                                 |
       |             Linking             |
       +----------------+----------------+
                        |
                        ↓
                 [ Executable ]

1. module.ixx가 컴파일되면 목적 파일인 module.obj와 BMI 파일인 module.ifc를 생성한다.
- 모듈도 컴파일되면 개별적인 오브젝트 파일로 변환됨.

2. main.cpp는 module.ixx의 모듈 이름을 가져와 사용하고 있기 때문에 module.ifc에 대한 의존성이 생긴다.

3. main.cpp가 컴파일되면 main.obj가 생성되고 이 파일은 module.obj와 결합되어 실행 파일을 생성한다.


헤더 파일을 #include하여 가져오는 방식과 모듈을 import하여 사용하는 방식은 차이가 있다.

https://www.albertogramaglia.com/modern-cpp-modules-theory/
위 링크의 Module dependencies 쪽에 자세한 내용이 나와 있으니 참고해서 보도록 하자.
위 링크에 나온 내용을 참고해서 보도록 하자.

1. #include 방식은 파일의 존재를 기반으로 컴파일을 진행한다.
- 파일을 포함하는 방식으로 동작하기 때문에 컴파일러는 손쉽게 파일을 읽기만 하면 됨.
- 간단한 방식이기 때문에 병렬적으로 각 TU를 컴파일하는 것이 가능함.
- 의존성을 프로그래머가 코드로 직접 결정해야 함.

2. import 방식은 있는 BMI를 체이닝(?)하는 방식으로 컴파일을 진행한다.
- 컴파일을 진행하기 전에 BMI에 대한 의존성을 파악하는 과정을 먼저 거쳐야 함.
- 컴파일러는 DAG(방향을 가진 비순환 그래프)를 통해 모듈 간 의존성을 파악하며 덕분에 프로그래머가 직접 의존성을 결정하지 않아도 됨.

!! 중요 !!
헤더 파일은 포함 관계에 따른 의존성에 대한 순서를 프로그래머가 직접 작성해줘야 했지만,
모듈 방식은 컴파일러가 의존성을 결정하기 때문에 import라는 행위 자체는 순서가 어찌되었든 의존성 결정에 영향을 주지 않는다.

!! 주의 !!
https://stackoverflow.com/questions/73626743/c-modules-and-circular-class-reference/73627088#73627088
https://stackoverflow.com/questions/60892272/forward-declaration-to-break-cyclic-dependency-in-c20-modules-doesnt-work
모듈이 의존성을 알아서 결정하긴 해도 이게 순환 의존성으로 인한 문제까지 해결해주는 것은 아니다.
모듈의 설계 철학에는 순환 의존성에 따른 문제를 원천적으로 막는다는 원리도 담겨 있다.

의도적으로 순환 종속성 문제를 일으키면 컴파일러는 에러를 발생시킨다.
error MSB8086: 순환 빌드 종속성이 검색되었습니다. A.ixx이(가) B.ixx에 종속됨이(가) A.ixx에 종속됨

##################################################

https://en.cppreference.com/w/cpp/language/modules#Importing_modules_and_header_units
https://www.modernescpp.com/index.php/c-20-modules-private-module-fragment-and-header-units/
https://vector-of-bool.github.io/2019/10/07/modules-3.html

헤더 유닛은 헤더 파일을 변환하여 모듈처럼 사용하기 위한 방식을 말한다.

표준 C++에서 제공하는 <iostream> 같은 헤더 파일을 물론이고 사용자가 만든 헤더 파일도 모듈로 변환해서 사용할 수 있다.

헤더 유닛은 헤더 파일로부터 구성된 개별적인 TU이며 당연히 헤더 파일을 별도로 컴파일하는 것으로 생성된다.

원문 : A header unit is a separate translation unit synthesized from a header.

헤더 유닛은 컴파일러마다 구현되는 방식이 다르며 각자 요구하는 별도의 설정이 존재한다.

!! 주의 !!
C++ 표준 라이브러리에 있는 헤더 파일은 헤더 유닛으로 사용할 수 있게 보장하고 있지만
C언어를 기반으로 만든 <cstdio>나 <cstring> 같은 건 헤더 유닛으로 사용하지 못할 가능성이 있다.


모든 헤더 파일을 헤더 유닛으로 사용할 수 있는 건 아니다.

#define _UNICODE
#include <windows.h>

#define _UNICODE
import <windows.h>;

import하기 이전에 정의한 전처리기 지시자는 헤더 유닛에게 그 어떠한 영향도 미치지 않는다.

첫 번째 방식을 쓰면 _UNOCDE는 헤더 파일 <windows.h>에 영향을 미친다.

하지만 두 번째 방식을 쓰면 _UNICODE는 헤더 유닛으로 사용한 <windows.h>에 영향을 미치지 않는다.

모든 헤더 파일은 헤더 유닛으로 변환할 수 있지만 이게 전부 호환된다는 것을 의미하는 건 아니다.

개발자는 모듈 파일을 작성할 때 Global module fragment에 #include 통해 헤더 파일을 적용할 것인지,

Module preamble에 import를 써서 헤더 유닛을 적용할 것인지를 선택할 수 있다.

헤더 유닛을 사용하고자 할 때는 다음과 같이 코드를 작성하면 된다(세미콜론이 반드시 뒤에 붙어야 함).

import <iostream>;
import "SomeHeader.h";

!! 주의 !!
헤더 유닛을 import하여 사용하면 헤더 유닛 내에 정의된 전처리기는 해당 헤더 유닛을 포함한 모듈(혹은 소스 코드)에 영향을 미친다.
하지만 반대로 헤더 유닛이 포함되기 이전에 정의한 전처리기는 포함된 헤더 유닛에 어떠한 영향도 미치지 못 한다.
따라서 헤더 파일의 동작이 사전에 코드 수준으로 정의된 전처리기 지시자에 의존적이라면 해당 헤더 파일은 헤더 유닛으로 사용할 수 없다.
이런 이유로 호환성을 위해서 모듈의 구성 요소에 Global module fragment를 따로 둔 것이다.

!! 혼동 !!
헤더를 헤더 유닛으로 사용할 때에서 헤더 내 정의된 전처리기 지시자는 import하는 쪽에 영향을 미치지만,
반대로 import하기 이전에 외부에서 정의한 전처리기 지시자는 해당 헤더 유닛에 영향을 미치지 않는다.
또한 모듈 내에 전처리기 지시자를 정의하면 이것 자체도 모듈에 캡슐화되기 때문에 모듈을 import하는 쪽에 영향을 주지 않는다.


https://learn.microsoft.com/en-us/cpp/build/walkthrough-header-units?view=msvc-170
https://learn.microsoft.com/en-us/cpp/build/walkthrough-import-stl-header-units?view=msvc-170
https://learn.microsoft.com/en-us/cpp/build/walkthrough-import-stl-header-units?view=msvc-170#use-translateinclude

Visual Studio에서 헤더 유닛을 컴파일하는 방법은 위 링크에 기술되어 있다.

1. 특정 파일을 헤더 유닛으로 적용하는 방법

2. 자동으로 모든 코드를 스캔하고 빌드하여 헤더 유닛을 적용하는 방법(모든 요소를 검사하기 때문에 최적의 빌드 결과를 도출하는 건 아님)

3. 표준 C++ 헤더 파일을 헤더 유닛으로 변환하여 정적 라이브러리에 적용하고 이를 공유하여 모듈을 import하는 방법


테스트 해본 결과 직접 헤더 파일을 생성하고 해당 헤더 파일에 별도의 설정을 건드리지 않고 모듈에 import하는 건 별 문제가 없었다.

하지만 소스 코드(.cpp) 수준에서 아무런 설정을 거치지 않고 헤더 파일을 import하면 에러가 발생했다.

원문:
Files that have the extension .ixx, and files that have their File properties > C/C++ > Compile As property 
set to Compile as C++ Header Unit (/export), are always scanned regardless of this setting.

위 내용을 근거로 하면 Visual Studio는 별도의 설정을 거치지 않고 헤더 파일을 import해도 모듈 한정으로 헤더 유닛으로 취급하는 것 같다.

하지만 소스 코드(.cpp) 내에서 헤더 파일을 import하여 헤더 유닛처럼 사용하려면 1번이나 2번 과정을 설정해줘야 했다.

별도의 설정을 거치지 않아도 헤더 파일을 모듈 내에서 import하면 헤더 유닛처럼 동작하는 건 Visual Studio의 특성이다.

다른 컴파일러를 쓴다면 별도의 설정이 필요할 수 있으니 주의하도록 하자.

Visual Studio의 소스 코드에서 헤더 유닛을 사용하려면?
: C/C++ -> General(일반) -> Scan Sources for Module Dependencies(소스의 모듈 종속성 검사) -> Yes

##################################################

정리하자면 모듈 방식의 장점은 다음과 같다.

1. 모듈은 컴파일된 하나의 BMI를 생성하고 이를 의존하여 사용하는 쪽에 공유되는 방식이다.
 - 이런 원리를 통해 여러 번 컴파일되는 문제를 방지하여 컴파일 속도를 개선한다.

2. 모듈 파일에 대응되는 BMI를 여러 번 생성하는 것이 아니기 때문에 ODR 위반(One Definition Rule Violations)이 발생하지 않는다.

3. 컴파일 단계에서 컴파일러가 의존성을 파악하기 때문에 프로그래머가 직접 의존성을 결정하지 않아도 된다.

4. 모듈은 높은 수준의 캡슐화가 적용되어 있기 때문에 export를 지정하지 않으면 그것이 매크로라고 외부에 영향을 미치지 않는다.

5. 모듈은 분할해서 기능을 작성하는 것이 가능하며 분할된 것을 합치는 것도 가능하다.

6. 기존의 헤더 파일도 컴파일러의 설정에 따라 헤더 모듈이란 형태의 모듈로 사용할 수 있다.

(주의) 템플릿 코드는 가능하면 쪼개지 않고 하나의 모듈 파일에 작성하는 것이 좋다(괜히 분할했다가 컴파일러 지원이 미비하기라도 하면 에러가 발생함).





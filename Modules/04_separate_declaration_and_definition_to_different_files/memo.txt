// Update Date : 2025-01-22
// OS : Windows 10 64bit
// Program : Visual Studio 2022
// Version : C++20
// Configuration : Debug-x64, Release-x64

https://www.modernescpp.com/index.php/c-20-modules-private-module-fragment-and-header-units/

하나의 모듈 파일에 선언과 정의를 동시에 해도 된다.

하지만 모듈의 기능을 기존의 헤더 파일(.h)과 소스 파일(.cpp) 방식처럼 별도의 파일로 분할해서 작업하는 것도 가능하다.

이는 선택사항이며 강제되는 것이 아니다.

선언을 담당하는 모듈 파일은 export module을 사용하여 이름을 결정해야 하고,

정의나 구현을 담당하는 모듈 파일은 module <name>을 사용하여 어떠한 모듈을 구현할 것인지 명시해야 한다.

선언을 담당하는 쪽은 한쪽에서 담당해야 하지만 구현을 담당하는 모듈 파일은 굳이 한 개일 필요는 없다.


모듈의 인터페이스를 선언하는 쪽의 파일 확장자는 ".ixx"를 사용하지만(module interface unit)

인터페이스의 정의 및 구현을 담당하는 파일의 확장자는 ".cpp"로 해야 한다(module implementation unit).

이유는 모르겠지만 찾아본 자료가 다 그러했으며 구현을 하는 쪽의 파일 확장자가 ".cpp"로 되어 있지 않으면 경고가 발생했다(실행은 문제 없었음).


컴파일러 해석 유닛으로 구분해서 보면

인터페이스를 선언하는 쪽 : module interface unit

선언한 인터페이스를 정의하는 쪽 : module implementation unit


인터페이스를 선언하는 쪽과 정의하는 쪽을 구분하면 빌드할 때 이점이 있다.

인터페이스를 정의하는 쪽을 구분하면 정의하는 쪽 파일이 수정되어도 선언하는 쪽의 모듈 파일은 재컴파일하지 않는다.

오후 4:16에 빌드를 시작함...
1>------ 빌드 시작: 프로젝트: Project, 구성: Debug x64 ------
1>모듈 종속성의 소스를 검사하는 중...
1>BasicModule_PrintImpl.cpp
1>컴파일하는 중...
1>BasicModule_PrintImpl.cpp
1>Project.vcxproj -> C:\Workspace\build-output\bin\Debug-x64\Project\Project.exe
1>'pwsh.exe'은(는) 내부 또는 외부 명령, 실행할 수 있는 프로그램, 또는
1>배치 파일이 아닙니다.
========== 빌드: 1개 성공, 0개 실패, 0개 최신 상태, 0개 건너뜀 ==========
========== 빌드이(가) 오후 4:16에 완료되었으며, 01.498 초이(가) 걸림 ==========


하지만 선언하는 쪽에서 정의까지 진행하고 해당 모듈 파일을 수정했을 때 해당 모듈 파일과 해당 모듈의 인터페이스를 사용하는 코드 전부를 재컴파일한다.

오후 4:17에 빌드를 시작함...
1>------ 빌드 시작: 프로젝트: Project, 구성: Debug x64 ------
1>모듈 종속성의 소스를 검사하는 중...
1>BasicModule.ixx
1>컴파일하는 중...
1>BasicModule.ixx
1>main.cpp <----- main.cpp 쪽에서도 인터페이스의 선언부가 수정되었다고 판단하고 재컴파일을 수행한다.
1>BasicModule_PrintImpl.cpp
1>BasicModule_AddImpl.cpp
1>Project.vcxproj -> C:\Workspace\build-output\bin\Debug-x64\Project\Project.exe
1>'pwsh.exe'은(는) 내부 또는 외부 명령, 실행할 수 있는 프로그램, 또는
1>배치 파일이 아닙니다.
========== 빌드: 1개 성공, 0개 실패, 0개 최신 상태, 0개 건너뜀 ==========
========== 빌드이(가) 오후 4:17에 완료되었으며, 02.432 초이(가) 걸림 ==========

